using System;
using System.Collections.Generic;

class Pessoa
{
    public string Nome { get; set; }
    public DateTime DataNascimento { get; set; }
    public string CPF { get; set; }

    public Pessoa(string nome, DateTime dataNascimento, string cpf)
    {
        Nome = nome;
        DataNascimento = dataNascimento;
        CPF = ValidarFormatarCPF(cpf);
    }

    private string ValidarFormatarCPF(string cpf)
    {

        return cpf;
    }
}

class Médico : Pessoa
{
    public string CRM { get; set; }

    public Médico(string nome, DateTime dataNascimento, string cpf, string crm)
        : base(nome, dataNascimento, cpf)
    {
        CRM = ValidarCRMUnico(crm);
    }
private string ValidarCRMUnico(string crm)
    {
        return crm;
    }
}

class Paciente : Pessoa
{
    public string Sexo { get; set; }
    public string Sintomas { get; set; }

    public Paciente(string nome, DateTime dataNascimento, string cpf, string sexo, string sintomas)
        : base(nome, dataNascimento, cpf)
    {
        Sexo = sexo;
        Sintomas = sintomas;
    }
}
class Consulta
{
    public DateTime DataConsulta { get; set; }
    public Medico MedicoResponsavel { get; set; }
    public Paciente PacienteAtendido { get; set; }
    public string Diagnostico { get; set; }

    public Consulta(DateTime dataConsulta, Medico medicoResponsavel, Paciente pacienteAtendido, string diagnostico)
    {
        DataConsulta = dataConsulta;
        MedicoResponsavel = medicoResponsavel;
        PacienteAtendido = pacienteAtendido;
        Diagnostico = diagnostico;
    }
}

class Consultorio
{
    private List<Medico> medicos = new List<Medico>();
    private List<Paciente> pacientes = new List<Paciente>();
    private List<Consulta> consultas = new List<Consulta>();

    public void AdicionarMedico(Medico medico)
    {
        if (MedicoCRMUnico(medico.CRM))
        {
            medicos.Add(medico);
            Console.WriteLine($"Medico {medico.Nome} adicionado com sucesso.");
        }
        else
        {
            Console.WriteLine($"Erro: CRM {medico.CRM} ja esta em uso.");
        }
    }

    public void AdicionarPaciente(Paciente paciente)
    {
        if (PacienteCPFUnico(paciente.CPF))
        {
            pacientes.Add(paciente);
            Console.WriteLine($"Paciente {paciente.Nome} adicionado com sucesso.");
        }
        else
        {
            Console.WriteLine($"Erro: CPF {paciente.CPF} ja esta em uso.");
        }
    }
public void RelatorioMedicosIdadeEntre(int idadeMinima, int idadeMaxima)
    {
        var medicosFiltrados = medicos.Where(m => CalcularIdade(m.DataNascimento) >= idadeMinima && CalcularIdade(m.DataNascimento) <= idadeMaxima);
        ExibirLista("Medicos com idade entre " + idadeMinima + " e " + idadeMaxima + " anos", medicosFiltrados.Cast<Pessoa>());
    }

    public void RelatorioPacientesIdadeEntre(int idadeMinima, int idadeMaxima)
    {
        var pacientesFiltrados = pacientes.Where(p => CalcularIdade(p.DataNascimento) >= idadeMinima && CalcularIdade(p.DataNascimento) <= idadeMaxima);
        ExibirLista("Pacientes com idade entre " + idadeMinima + " e " + idadeMaxima + " anos", pacientesFiltrados.Cast<Pessoa>());
    }

    public void RelatorioPacientesPorSexo(string sexo)
    {
        var pacientesFiltrados = pacientes.Where(p => p.Sexo.ToLower() == sexo.ToLower());
        ExibirLista("Pacientes do sexo " + sexo, pacientesFiltrados.Cast<Pessoa>());
    }

    public void RelatorioPacientesOrdemAlfabetica()
    {
        var pacientesOrdenados = pacientes.OrderBy(p => p.Nome);
        ExibirLista("Pacientes em ordem alfabetica", pacientesOrdenados.Cast<Pessoa>());
    }

    public void RelatorioPacientesPorSintomas(string textoSintomas)
    {
        var pacientesFiltrados = pacientes.Where(p => p.Sintomas.ToLower().Contains(textoSintomas.ToLower()));
        ExibirLista("Pacientes cujos sintomas contenham '" + textoSintomas + "'", pacientesFiltrados.Cast<Pessoa>());
    }

    public void RelatorioAniversariantesDoMes(int mes)
    {
        var aniversariantes = medicos.Cast<Pessoa>().Concat(pacientes.Cast<Pessoa>()).Where(p => p.DataNascimento.Month == mes);
        ExibirLista("Aniversariantes do mes " + mes, aniversariantes);
    }
private int CalcularIdade(DateTime dataNascimento)
    {
        DateTime dataAtual = DateTime.Now;
        int idade = dataAtual.Year - dataNascimento.Year;
        if (dataNascimento > dataAtual.AddYears(-idade))
            idade--;

        return idade;
    }

    private void ExibirLista(string titulo, IEnumerable<Pessoa> pessoas)
    {
        Console.WriteLine($"\n--- {titulo} ---");
        foreach (var pessoa in pessoas)
        {
            Console.WriteLine($"Nome: {pessoa.Nome}, Idade: {CalcularIdade(pessoa.DataNascimento)} anos");
        }
        Console.WriteLine();
    }

    private bool MedicoCRMUnico(string crm)
    {
        return !medicos.Any(m => m.CRM == crm);
    }

    private bool PacienteCPFUnico(string cpf)
    {
        return !pacientes.Any(p => p.CPF == cpf);
    }
}

    }
}
